{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAsB9C,OACQ,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACvCN,EAAc,MAQd,SACI,uBACIO,KAAO,OACPC,MAAUT,EACVU,SAvBU,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,mGACqFC,UAAUH,IAD/F,SAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAeZM,GAfY,4CAAH,sDCCPO,EAAc,SAAC,GAAsB,IAApBJ,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAGnC,OAFAc,QAAQC,IAAIN,EAAGC,EAAMV,GAGjB,sBAAKgB,UAAY,oCAAjB,UACI,qBAAKC,IAAOjB,EAAOkB,IAAOR,IAC1B,kCAAKA,EAAL,YCHCS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDZ,SAAEA,GAAe,IAAD,EAEbd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAoBvC,OAbAC,qBAAW,WAEH1B,EAASC,GACR0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKvB,CAACtB,IAEIuB,EDhBwBK,CAAc5B,GAAjCa,EAHuB,EAG5BN,KAAae,EAHe,EAGfA,QAKpB,OAHAN,QAAQC,IAAIK,GAIR,cADM,CACN,sBACA,qBAAIJ,UAAY,oCAAhB,cAAsDlB,EAAtD,QAEEsB,GAAW,mBAAGJ,UAAY,oCAAf,uBAEf,qBAAKA,UAAY,YAAjB,SAEcL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADGA,EAAIC,aEkBpBkB,EAnCM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,oBAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KASvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAIA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAYA,GADLA,YCrB/B+B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.810a996d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue( e.target.value )\r\n    }\r\n\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();  //Para prevenir refrescar todo el navegador\r\n\r\n        if( inputValue.trim().length > 2){\r\n            setCategories( cats => [ inputValue,...cats]);\r\n            setInputValue('');\r\n        } \r\n\r\n        \r\n        //console.log('Submit hecho');\r\n    }\r\n\r\n    return (\r\n            <form onSubmit = { handleSubmit}>  \r\n                <input\r\n                    type = \"text\"\r\n                    value = { inputValue }\r\n                    onChange = { handleInputChange }\r\n                />\r\n            </form>\r\n    )\r\n}\r\n    \r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=lLZj80Nq7qEiZbHmVvEXozp5rxsCGSkW&limit=10&q=${encodeURI(category)}`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    //Guardando en un objeto la informacion de interes\r\n    const gifs = data.map( img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id,title,url} ) => {\r\n    console.log(id,title,url);\r\n\r\n    return (\r\n        <div className = \"animate__animated animate__fadeIn\">\r\n            <img src = {url}   alt = {title} />\r\n            <p> {title}  </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';  //,{useState, useEffect} \r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n   \r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n    console.log(loading);\r\n\r\n\r\n    return (  //Para regresar una secci√≥n con el texto de la categoria\r\n        <>\r\n        <h3 className = \"animate__animated animate__fadeIn\"> {category}  </h3>\r\n\r\n        { loading && <p className = \"animate__animated animate__flash \"> Loading </p> }\r\n\r\n      <div className = \"card-grid\">\r\n                { \r\n                    images.map( img  => (\r\n                        <GifGridItem \r\n                        key = {img.id}\r\n                        {...img}\r\n                        />\r\n                    ))\r\n                }  \r\n        </div> \r\n        </>\r\n    )\r\n    \r\n}\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n    //useEffect( ()=>{   //Para ejecutar la instruccion solo cuando el componente se renderize por primera vez, fue reemplazado por el hook useFetchGifs\r\n    //    getGifs(category)\r\n    //    .then(setImages)//(imgs => setImages( imgs ))\r\n    //},[ category ])\r\n\r\n    //getGifs();\r\n\r\n\r\n\r\n\r\n\r\n                /*images.map( img => (          //Esta es una forma de hacerlo\r\n                    <li key = {img.id}> {img.title} </li>\r\n                    ))*/\r\n                /*images.map( ({id,title}) => (   //Haciendo uso de la desestructuracion\r\n                        <li key = {id}> {title} </li>\r\n                ))   */\r\n\r\n\r\n            //{loading ? 'Cargando...' : 'Data cargada'}   //OPerador tenario","//Intentar poner use al iniciar un hook\r\nimport {useState,useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs= ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n            getGifs( category )\r\n            .then( imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n\r\n    },[category])\r\n\r\n    return state;    //{ data: [], loading: true}\r\n}\r\n","import React,{ useState } from 'react'\r\n//import PropTypes from 'prop-types'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport {GifGrid} from './components/GifGrid'\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Attack on titan'])    \r\n\r\n   // const handleAdd = () =>{\r\n    //    setCategories( cats => [...cats,'HunterXHunter']);    //( ['HunterXHunter', ...categories]);         // ( [...categories, 'HunterXHunter']); \r\n   // }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr/>\r\n\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category =>  (\r\n                        <GifGrid \r\n                        key = {category} \r\n                        category = {category}/>\r\n                    ))\r\n                }\r\n            </ol>    \r\n\r\n        </>\r\n    )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react' ;\r\nimport ReactDOM from 'react-dom';\r\n//import PropTypes from 'prop-types'\r\nimport './index.css';\r\nimport GifExpertApp  from './GifExpertApp'\r\n \r\nReactDOM.render(\r\n    <GifExpertApp/>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}